#+title: Emacs Configuration
#+author: Francisco Cornejo-Garcia
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Package Setup
#+begin_src emacs-lisp
  (require 'package)                   ; enable package
  (setq package-archives               ; access online packages
	'(("melpa" . "https://melpa.org/packages/")
	  ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)                 ; set up packages before reading config
#+end_src

* Use Package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package) ; install use-package if not available
    (package-refresh-contents)               ; refresh online packages
    (package-install 'use-package))
  (eval-when-compile (require 'use-package)) ; enable use-package
  (setq use-package-always-ensure t)         ; ensure packages are loaded
#+end_src

* User Interface
#+begin_src emacs-lisp
  (menu-bar-mode -1)                ; remove menu bar
  (scroll-bar-mode -1)              ; remove scroll bar
  (tool-bar-mode -1)                ; remove tool bar
  (show-paren-mode 1)               ; enable paren mode
  (global-hl-line-mode 1)           ; enable hl mode
  (column-number-mode)              ; view column location
  (fset 'yes-or-no-p 'y-or-n-p)     ; set yes/no to y/n
  (global-auto-revert-mode t)       ; auto update buffer
  (setq indent-tabs-mode nil)       ; convert tab to spaces
  (setq ring-bell-function 'ignore) ; ignore visual bell
  (setq mac-option-modifier 'meta)  ; set option to meta
  (load-theme 'base16-grayscale-dark t) ; load custom them
  (set-face-attribute 'default nil :font "JetBrains Mono-12:antialias=on")
#+end_src

* Files
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file t)
  (setq make-backup-files nil)         ; disable backup files
  (setq create-lockfiles nil)          ; disable lockfiles
  (setq auto-save-file-name-transforms ; autosave in tmp directory
        `((".*", temporary-file-directory t)))
#+end_src

* Keybindings
#+begin_src emacs-lisp
  (global-set-key
   (kbd "C-c fi") '(lambda ()
                     (interactive) (find-file "~/Documents/dotfiles/emacs/.emacs.d/init.org")))
#+end_src

* Evil
#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode 1))
  (use-package evil ; vim mode
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    :config (evil-mode 1))
  (use-package evil-collection
    :after evil
    (evil-collection-init))
#+end_src

* Counsel
  #+begin_src emacs-lisp
    (use-package counsel ; more functionality
      :bind (("M-x" . counsel-M-x))
      :config (setq ivy-initial-inputs-alist nil)) ; remove ^
  #+end_src

* Ivy
  #+begin_src emacs-lisp
    (use-package ivy ; general completion
      :bind (("C-s" . swiper))
      :init (ivy-mode 1))
    (use-package ivy-rich ; add more context
      :after ivy
      :init (ivy-rich-mode 1))
  #+end_src

* Which Key
  #+begin_src emacs-lisp
    (use-package which-key ; view keybindings
      :init (which-key-mode)
      :config (setq which-key-idle-delay 0.3))
  #+end_src

* Org
#+begin_src emacs-lisp
  (defun fcg/org-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (auto-fill-mode 0)
    (set-fill-column 79)
    (display-fill-column-indicator-mode 1))

  (use-package org
    :mode ("\\.txt\\'" . org-mode)
    :hook (org-mode . fcg/org-setup)
    :config
    (setq org-src-window-setup "current-window"
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-preserve-indentation nil
          org-startup-folded t)
    (require 'org-tempo) ; autocomplete templates
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

* Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :init (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/az/")
    (org-roam-file-extensions '("txt"))
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.txt" "#+title: ${title}")
        :unnarrowed t)))
    :bind (("C-c r f" . org-roam-node-find)
           ("C-c r i" . org-roam-node-insert)
           ("C-c r t" . org-roam-buffer-toggle))
    :config (org-roam-setup))
#+end_src

* Org Roam UI
#+begin_src emacs-lisp
  (use-package websocket)
  (use-package simple-httpd)
  (add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
  (load-library "org-roam-ui")
  (setq org-roam-ui-sync-theme t
                org-roam-ui-follow t
                org-roam-update-on-save t
                org-roam-ui-open-on-start t)
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-banner-logo-title "")
    (setq dashboard-startup-banner "~/Documents/dotfiles/background-vert.png")
    (setq dashboard-items '())
    (setq dashboard-set-init-info nil)
    (setq dashboard-set-footer t)
    (setq dashboard-center-content t)
    (dashboard-setup-startup-hook))
#+end_src
